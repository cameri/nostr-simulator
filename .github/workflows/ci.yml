name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run quality checks and tests
      run: |
        poetry run poe check-all
        poetry run poe test-cov-parallel

    - name: List coverage files (debug)
      run: |
        echo "Listing coverage files:"
        ls -la .coverage* || echo "No coverage files found"

    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      with:
        name: coverage-data-${{ matrix.python-version }}
        path: |
          .coverage
          .coverage.*
        include-hidden-files: true
        if-no-files-found: error

  coverage:
    name: Combine & check coverage
    if: always()
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          # Use latest Python, so it understands all syntax.
          python-version: "3.12"

      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage & fail if it's <90%
        run: |
          python -Im pip install --upgrade coverage[toml]

          # List downloaded files (debug)
          echo "Files in current directory:"
          ls -la
          echo "Looking for coverage files:"
          ls -la .coverage* || echo "No coverage files found"

          # Combine coverage data (will succeed even if only one file exists)
          python -Im coverage combine || echo "No data to combine (continuing anyway)"

          # Check if we have combined data
          if [ -f ".coverage" ]; then
            echo "Coverage data found, generating reports..."

            # Create HTML report
            python -Im coverage html --skip-covered --skip-empty

            # Report and write to summary.
            python -Im coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

            # Report again and fail if under 90%.
            python -Im coverage report --fail-under=90
          else
            echo "No coverage data available after combine step"
            exit 1
          fi

      - name: Upload HTML report if check failed
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

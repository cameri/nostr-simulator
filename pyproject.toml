[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "nostr-simulator"
version = "0.1.0"
description = "A Python-based simulator for decentralized anti-spam and anti-abuse strategies on Nostr"
authors = ["Ricardo Cabral <me@ricardocabral.io>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/cameri/nostr-simulator"
repository = "https://github.com/cameri/nostr-simulator"
documentation = "https://github.com/cameri/nostr-simulator"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Networking",
]
packages = [{include = "nostr_simulator", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Agent-based modeling and simulation
mesa = "^3.0.0"
numpy = "^1.24.0"
pandas = "^2.0.0"
matplotlib = "^3.5.0"
seaborn = "^0.12.0"
networkx = "^3.0"
# Logging and configuration
pydantic = "^2.0.0"
pyyaml = "^6.0.0"
rich = "^13.0.0"

[tool.poetry.group.dev.dependencies]
# Development and formatting tools
pre-commit = "^4.2.0"
mdformat = "^0.7.18"
mdformat-gfm = "^0.3.6"
mdformat-frontmatter = "^2.0.8"
mdformat-footnote = "^0.1.1"
mdformat-mkdocs = "^3.0.0"
# Python code quality tools
black = "^24.10.0"
isort = "^5.12.0"
mypy = "^1.13.0"
ruff = "^0.8.4"
bandit = "^1.8.0"
# Testing
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
# Type stubs
types-pyyaml = "^6.0.0"
# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"

[tool.poetry.scripts]
nostr-simulator = "nostr_simulator.main:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/nostr_simulator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90"
]
testpaths = ["src"]
python_files = ["*.test.py", "*.spec.py", "test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "nostr-simulator"
version = "0.1.0"
description = "A Python-based simulator for decentralized anti-spam and anti-abuse strategies on Nostr"
authors = ["Ricardo Cabral <me@ricardocabral.io>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/cameri/nostr-simulator"
repository = "https://github.com/cameri/nostr-simulator"
documentation = "https://github.com/cameri/nostr-simulator"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Networking",
]
packages = [{include = "nostr_simulator", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Agent-based modeling and simulation
mesa = "^3.0.0"
numpy = "^1.24.0"
pandas = "^2.0.0"
matplotlib = "^3.5.0"
seaborn = "^0.12.0"
networkx = "^3.0"
# Logging and configuration
pydantic = "^2.0.0"
pyyaml = "^6.0.0"
rich = "^13.0.0"

[tool.poetry.group.dev.dependencies]
# Development and formatting tools
pre-commit = "^4.2.0"
mdformat = "^0.7.18"
mdformat-gfm = "^0.3.6"
mdformat-frontmatter = "^2.0.8"
mdformat-footnote = "^0.1.1"
mdformat-mkdocs = "^3.0.0"
# Python code quality tools
black = "^24.10.0"
isort = "^5.12.0"
mypy = "^1.13.0"
ruff = "^0.8.4"
bandit = "^1.8.0"
# Testing
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
# Type stubs
types-pyyaml = "^6.0.0"
# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
poethepoet = "^0.36.0"

[tool.poetry.scripts]
nostr-simulator = "nostr_simulator.main:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/nostr_simulator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
    "--cov-branch"
]
testpaths = ["src"]
python_files = ["*.test.py", "*.spec.py", "test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# ============================================================================
# Task Runner Configuration (poethepoet)
# ============================================================================
# Single source of truth for all project commands and scripts
# Usage: poetry run poe <task_name>
#        or: poe <task_name> (if poethepoet is installed globally)

[tool.poe.tasks]
# Code formatting and import sorting
format = "black ."
format-check = "black --check ."
sort-imports = "isort ."
sort-imports-check = "isort --check-only ."

# Linting and type checking
lint = "ruff check ."
lint-fix = "ruff check --fix ."
type-check = "mypy ."

# Testing tasks
test = "pytest"
test-cov = "pytest --cov=src/nostr_simulator --cov-report=term-missing --cov-report=html --cov-fail-under=90"
test-cov-parallel = "pytest --cov=src/nostr_simulator --cov-report=term --cov-fail-under=0"
test-cov-xml = "pytest --cov=src/nostr_simulator --cov-report=xml --cov-report=term --cov-fail-under=90"
test-fast = "pytest -x --ff"  # Stop on first failure, run previously failed tests first
test-no-cov = "pytest --no-cov"  # Run tests without coverage for faster feedback

# Combined quality tasks
format-all = ["format", "sort-imports"]  # Format code and sort imports
check-all = ["format-check", "sort-imports-check", "lint", "type-check"]  # All quality checks
quality = ["check-all"]  # Alias for check-all
ci = ["check-all"]  # What CI runs (coverage is handled separately)

# Simulation and main application
simulate = "python -m nostr_simulator.main"
run-scenarios = "python src/run_scenarios.py"

# Documentation tasks
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"
docs-clean = { "shell" = "rm -rf site/" }

# Maintenance tasks
clean = { "shell" = "find . -type d -name __pycache__ -exec rm -rf {} + && find . -name '*.pyc' -delete && rm -rf .coverage htmlcov/ .pytest_cache/ .mypy_cache/ .ruff_cache/" }
clean-all = ["clean", "docs-clean"]

# Dependency management
update-deps = "poetry update"
show-outdated = "poetry show --outdated"

# Security
security = "bandit -r src/"

# Version control (Jujutsu)
jj-status = "jj status --no-pager"
jj-log = "jj log --no-pager --limit 10"
jj-diff = "jj diff --no-pager --git"
jj-describe = "jj describe"
jj-push = "jj git push"
jj-pull = "jj git fetch && jj rebase"
jj-new = "jj new"
jj-commit = "jj commit"
jj-squash = "jj squash"
jj-abandon = "jj abandon"

[tool.poe.tasks.jj-bookmark]
shell = "jj bookmark set $bookmark -r $revision"
args = [
    { name = "bookmark", help = "Bookmark name", options = ["-b", "--bookmark"], required = true },
    { name = "revision", help = "Revision ID", options = ["-r", "--revision"], required = true }
]
help = "Set a bookmark to a specific revision. Usage: poetry run poe jj-bookmark --bookmark main --revision abc123"

[tool.poe.tasks.jj-bookmark-list]
shell = "jj bookmark list"
help = "List all bookmarks"

[tool.poe.tasks.jj-bookmark-delete]
shell = "jj bookmark delete $bookmark"
args = [
    { name = "bookmark", help = "Bookmark name to delete", options = ["-b", "--bookmark"], required = true }
]
help = "Delete a bookmark. Usage: poetry run poe jj-bookmark-delete --bookmark feature-branch"

[tool.poe.tasks.jj-create-commit]
shell = "jj commit -m \"$message\""
args = [
    { name = "message", help = "Commit message", options = ["-m", "--message"], required = true }
]
help = "Commit all changes with a message. Usage: poetry run poe jj-create-commit -m 'Your commit message'"

[tool.poe.tasks.jj-branch]
shell = "jj new -m '${message}'"
help = "Create a new branch with a message. Usage: poetry run poe jj-branch --message 'Branch description'"

[tool.poe.tasks.jj-sync]
shell = "jj git fetch && jj rebase -d main"
help = "Sync with remote main branch"

[tool.poe.tasks.jj-clean-abandoned]
shell = "jj log --no-graph -r 'mine() & empty() & abandoned()' --template 'change_id.short()' | xargs -r jj abandon"
help = "Clean up abandoned empty commits"

# Development setup and workflow tasks
[tool.poe.tasks.setup]
sequence = ["clean", "update-deps", "check-all", "test-cov"]
help = "Full development setup"

[tool.poe.tasks.pre-commit]
sequence = ["format", "sort-imports", "lint-fix", "type-check", "test-fast"]
help = "Pre-commit checks"

[tool.poe.tasks.prepare-commit]
sequence = ["format-all", "lint-fix", "test-fast", "jj-status"]
help = "Prepare for commit with quality checks and status"

[tool.poe.tasks.commit-ready]
sequence = ["check-all", "test-cov", "jj-diff"]
help = "Check if ready to commit"

[tool.poe.tasks.safe-commit]
sequence = ["format-all", "lint-fix", "check-all", "test-fast"]
help = "Run all quality checks before committing (does not actually commit)"

[tool.poe.tasks.quick-save]
shell = "poetry run poe format-all && jj commit -m 'WIP: quick save'"
help = "Quick save work in progress with formatting"

[tool.poe.tasks.test-watch]
shell = "find src tests -name '*.py' | entr -r poetry run pytest"
help = "Run tests automatically when files change (requires entr)"

[tool.poe.tasks.cov-report]
shell = "poetry run pytest --cov=src/nostr_simulator --cov-report=html && open htmlcov/index.html"
help = "Generate coverage report and open in browser"

# Environment variables for all tasks
[tool.poe.env]
COVERAGE_THRESHOLD = "90"
PYTHONPATH = "src"
